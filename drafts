
//manipulate variable environments
/*retrieve the value of an environement variable*/
#include <stdio.h>
#include <stdlib.h>

int main() 
{
    char* path = getenv("PATH");
    if (path != NULL) {
        printf("PATH: %s\n", path);
    } else {
        printf("PATH environment variable not found.\n");
    }

    return 0;
}

/*to set or modify an environemetn variable*/
int main() {
    setenv("MY_VARIABLE", "my_value", 1);  // Overwrite if it exists
    char* myVariable = getenv("MY_VARIABLE");
    if (myVariable != NULL) {
        printf("MY_VARIABLE: %s\n", myVariable);
    } else {
        printf("MY_VARIABLE environment variable not found.\n");
    }

    return 0;
}

/*to remove an environement variable*/
int main() {
    unsetenv("MY_VARIABLE");
    char* myVariable = getenv("MY_VARIABLE");
    if (myVariable != NULL) {
        printf("MY_VARIABLE: %s\n", myVariable);
    } else {
        printf("MY_VARIABLE environment variable not found.\n");
    }

    return 0;
}

//create and manipulate processes
/*create processes*/
#include <stdio.h>
#include <unistd.h>

int main() {
    pid_t child_pid;

    child_pid = fork();

    if (child_pid == -1) {
        perror("fork failed");
        return 1;
    }

    if (child_pid == 0) {
        // This code runs in the child process
        printf("Child process\n");
    } else {
        // This code runs in the parent process
        printf("Parent process\n");
    }

    return 0;
}


void clearmemo()
{
	if (storage != NULL)
	{
		int i = 0;
		while(storage[i] != NULL)
		{
			free(storage[i]);
			i++;
		}
		free(storage);
	}
}


